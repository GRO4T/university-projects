{"version":3,"sources":["Tile.jsx","App.js","index.js"],"names":["TileStyled","styled","div","boolToStr","state","predictionToStr","getPredictionCorrectnessClass","prediction","active","purchased","Tile","data","id","gender","city","prediction_A","prediction_B","event_cnt","activeStr","purchasedStr","predAStr","predBStr","ACorrectClass","BCorrectClass","className","WrapperStyles","HeaderStyles","header","MainStyles","main","App","useState","connStatus","setConnStatus","sessions","setSessions","useEffect","ws","WebSocket","window","location","hostname","onopen","onclose","onerror","onmessage","e","JSON","parse","map","d","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAIMA,EAAaC,IAAOC,IAAV,owBAgDVC,EAAY,SAAAC,GAAK,OAAKA,EAAQ,OAAS,SAEvCC,EAAkB,SAAAD,GACtB,MAAc,YAAVA,EACKA,EAEFA,EAAQ,QAAU,QAGrBE,EAAgC,SAACC,EAAYC,EAAQC,GACzD,MAAmB,YAAfF,GAA4BC,EACvB,GAEFD,IAAeE,EAAY,UAAY,aAGzC,SAASC,EAAT,GAAyB,IAATC,EAAQ,EAARA,KACbC,EAA+ED,EAA/EC,GAAIC,EAA2EF,EAA3EE,OAAQC,EAAmEH,EAAnEG,KAAMN,EAA6DG,EAA7DH,OAAQC,EAAqDE,EAArDF,UAAWM,EAA0CJ,EAA1CI,aAAcC,EAA4BL,EAA5BK,aAAcC,EAAcN,EAAdM,UAEnEC,EAAYf,EAAUK,GACtBW,EAAehB,EAAUM,GACzBW,EAAWf,EAAgBU,GAC3BM,EAAWhB,EAAgBW,GAE3BM,EAAgBhB,EAA8BS,EAAcP,EAAQC,GACpEc,EAAgBjB,EAA8BU,EAAcR,EAAQC,GAE1E,OACE,eAACT,EAAD,CAAYwB,UAAWhB,GAAU,SAAjC,UACE,sBAAKI,GAAG,OAAR,UACE,qBAAKA,GAAG,KAAR,SAAcA,IACd,sBAAKA,GAAG,WAAR,UACc,MAAXC,EAAiB,OAAS,SAD7B,SAC6CC,KAE7C,gCACE,gCACE,4CACA,+BAAOG,OAET,gCACE,4CACA,sBAAMO,UAAWN,EAAjB,SAA6BA,OAE/B,gCACE,+CACA,sBAAMM,UAAWL,EAAjB,SAAgCA,UAGpC,gCACE,gCACE,kDACA,sBAAMK,UAAWJ,EAAjB,SAA4BA,OAE9B,gCACE,kDACA,sBAAMI,UAAWH,EAAjB,SAA4BA,aAIlC,qBAAKG,UAAWF,IAChB,qBAAKE,UAAWD,OC5GtB,IAAME,EAAgBxB,IAAOC,IAAV,mIAQbwB,EAAezB,IAAO0B,OAAV,8IAQZC,EAAa3B,IAAO4B,KAAV,+LAuCDC,MA5Bf,WACE,MAAoCC,mBAAS,iBAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAcA,OAZAC,qBAAU,WACR,IAAMC,EAAK,IAAIC,UAAJ,UACD,eAAmCC,OAAOC,SAASC,SAAnD,SADC,uBAIXJ,EAAGK,OAAS,kBAAMT,EAAc,cAChCI,EAAGM,QAAU,kBAAMV,EAAc,iBACjCI,EAAGO,QAAU,kBAAMX,EAAc,WAEjCI,EAAGQ,UAAY,SAAAC,GAAC,OAAIX,EAAYY,KAAKC,MAAMF,EAAEnC,UAC5C,IAGD,eAACc,EAAD,WACE,eAACC,EAAD,+BAAgCM,KAChC,cAACJ,EAAD,UACGM,EAASe,KAAI,SAAAC,GAAC,OACb,cAACxC,EAAD,CAAiBC,KAAMuC,GAAZA,EAAEtC,aC9CvBuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.01885132.chunk.js","sourcesContent":["/* eslint-disable camelcase */\n/* eslint-disable react/prop-types */\nimport styled from 'styled-components';\n\nconst TileStyled = styled.div`\n  --green: #8bc34a;\n  --red: #f44336;\n\n  padding: 1rem;\n  background-color: rgba(0, 0, 0, 0.1);\n  border: 1px solid black;\n  border-radius: 1rem;\n  display: grid;\n  grid-template-columns: auto 4px;\n  grid-template-rows: 1fr 1fr;\n  gap: 1rem;\n  overflow: hidden;\n\n  #info {\n    grid-row: 1 / 3;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-rows: auto 1fr;\n    gap: 1rem;\n    align-items: end;\n  }\n\n  &.active {\n    background-color: #2196f330;\n  }\n\n  .True {\n    color: var(--green);\n  }\n\n  .False {\n    color: var(--red);\n  }\n\n  .pending {\n    color: #fff3;\n  }\n\n  .correct {\n    background-color: var(--green);\n  }\n\n  .incorrect {\n    background-color: var(--red);\n  }\n`;\n\nconst boolToStr = state => (state ? 'True' : 'False');\n\nconst predictionToStr = state => {\n  if (state === 'pending') {\n    return state;\n  }\n  return state ? 'False' : 'True';\n};\n\nconst getPredictionCorrectnessClass = (prediction, active, purchased) => {\n  if (prediction === 'pending' || active) {\n    return '';\n  }\n  return prediction === purchased ? 'correct' : 'incorrect';\n};\n\nexport function Tile({ data }) {\n  const { id, gender, city, active, purchased, prediction_A, prediction_B, event_cnt } = data;\n\n  const activeStr = boolToStr(active);\n  const purchasedStr = boolToStr(purchased);\n  const predAStr = predictionToStr(prediction_A);\n  const predBStr = predictionToStr(prediction_B);\n\n  const ACorrectClass = getPredictionCorrectnessClass(prediction_A, active, purchased);\n  const BCorrectClass = getPredictionCorrectnessClass(prediction_B, active, purchased);\n\n  return (\n    <TileStyled className={active && 'active'}>\n      <div id=\"info\">\n        <div id=\"id\">{id}</div>\n        <div id=\"personal\">\n          {gender === 'M' ? 'Male' : 'Female'} from {city}\n        </div>\n        <div>\n          <div>\n            <span>Events: </span>\n            <span>{event_cnt}</span>\n          </div>\n          <div>\n            <span>Active: </span>\n            <span className={activeStr}>{activeStr}</span>\n          </div>\n          <div>\n            <span>Purchased: </span>\n            <span className={purchasedStr}>{purchasedStr}</span>\n          </div>\n        </div>\n        <div>\n          <div>\n            <span>Needs help A? </span>\n            <span className={predAStr}>{predAStr}</span>\n          </div>\n          <div>\n            <span>Needs help B? </span>\n            <span className={predBStr}>{predBStr}</span>\n          </div>\n        </div>\n      </div>\n      <div className={ACorrectClass} />\n      <div className={BCorrectClass} />\n    </TileStyled>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Tile } from './Tile';\n\nconst WrapperStyles = styled.div`\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-rows: auto 1fr;\n  overflow: auto;\n`;\n\nconst HeaderStyles = styled.header`\n  margin-top: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.75rem;\n`;\n\nconst MainStyles = styled.main`\n  height: fit-content;\n  padding: 1rem;\n  display: grid;\n  gap: 1rem;\n  grid-template-columns: repeat(auto-fill, minmax(360px, 1fr));\n  align-items: center;\n`;\n\nconst isDev = process.env.NODE_ENV === 'development';\n\nfunction App() {\n  const [connStatus, setConnStatus] = useState('Connecting...');\n  const [sessions, setSessions] = useState([]);\n\n  useEffect(() => {\n    const ws = new WebSocket(\n      `${isDev ? 'ws://localhost:8000' : `ws://${window.location.hostname}:8000`}/ws/employee_panel`\n    );\n\n    ws.onopen = () => setConnStatus('Connected');\n    ws.onclose = () => setConnStatus('Disconnected');\n    ws.onerror = () => setConnStatus('Error!');\n\n    ws.onmessage = e => setSessions(JSON.parse(e.data));\n  }, []);\n\n  return (\n    <WrapperStyles>\n      <HeaderStyles>Employee panel - {connStatus}</HeaderStyles>\n      <MainStyles>\n        {sessions.map(d => (\n          <Tile key={d.id} data={d} />\n        ))}\n      </MainStyles>\n    </WrapperStyles>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}